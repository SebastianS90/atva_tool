REQUIREMENTS
============
Intel's PIN tool (version 3.2-81205), which is available here: http://software.intel.com/sites/landingpage/pintool/downloads/pin-3.2-81205-gcc-linux.tar.gz

GDB (version >= 7.10)

Input file that will be provided to the tool should be "compilable" (i.e. "gcc file.c -lpthread" should work)
Change the function run_file in run.sh to add additional flags

RUNNING
=======
Once you have above requirements modify the file 'run.sh' to update the path of PIN. Then run it under bash.

You can either pass single ANSI-C file (with '-f' option) or pass multiple files by a file which has list of files. You can pass the unwind count with -u option. Optionally you can specify unwind count in the file (if you are using file list) by separating it by a space. Refer 'file_list_example' for an example.

A typical run looks like:
"bash run.sh -f example.c -u 10"
This takes example.c from current directory and unwind depth of 10.

run_all.sh runs three cbmc: cbmc with invariants, cbmc with arbitary writes and plain cbmc. 
Usage: run_all.sh file_list [unwindc]


DETAILS
=======
Given an ANSI-C file example.c we first compile it and then run the binary under pin tool 'trace.so' to get multiple executions. The execution log is then parsed(parse program) to get write set(defuse and defuse_cbmc files in log_* directory). This write set is passed to CBMC along with example.c and unwind depth provided.
While running under the pin tool we may observe assertion failure. In such case we still go ahead and get invariants. 

Description of files:
cbmc		     CBMC binary with our change
example.c	     an example program, which is safe and unwind count 10
file_list_example    another example to show how multiple files can be passed
macros.h	     macros used by pin tool
parse.cpp	     parser of executions generated by pin tool
trace.cpp	     pin tool
verifier.c	     our definitions of some of the common functions used in benchmarks
run_all.sh      run three variants of cbmc

Source of CBMC changes can be found here: https://github.com/sumanthsprabhu/cbmc/tree/rf_underapprox

References:
Y. Shi, S. Park, Z. Yin, S. Lu, Y. Zhou, W. Chen, and W. Zheng. 
Do i use the wrong definition? defuse: Definition-use invariants for detecting concurrency and sequential bugs. 
In ACM Sigplan Notices 2010 Oct 17 (Vol. 45, No. 10, pp. 160-174). ACM.

Alglave J, Kroening D, Tautschnig M. 
Partial orders for efficient bounded model checking of concurrent software. 
In International Conference on Computer Aided Verification 2013 Jul 13 (pp. 141-157). 
Springer Berlin Heidelberg.
